{"version":3,"sources":["redux/dialogs-reducer.js","api/api.js","components/users/Users.module.css","components/profile/MyPosts/Post/Post.module.css","components/hoc/withAuthRedirect.js","components/profile/MyPosts/Post/Post.js","components/profile/MyPosts/MyPosts.js","components/profile/ProfileInfo/ProfileStatus.js","components/profile/ProfileInfo/ProfileStatusWithHooks.js","components/profile/ProfileInfo/ProfileInfo.js","components/profile/MyPosts/MyPostsContainer.js","components/profile/Profile.js","components/navbar/Navbar.module.css","assets/images/Spinner-3.4s-200px.svg","components/common/Preloader/Preloader.js","serviceWorker.js","redux/sidebar-reducer.js","utils/object-helpers.js","redux/users-reducer.js","redux/auth-reducer.js","redux/app-reducer.js","redux/redux-store.js","components/navbar/Navbar.js","components/common/Paginator/Paginator.js","assets/images/user.png","components/users/User.js","components/users/Users.js","redux/users-selectors.js","components/users/UsersContainer.js","components/header/Header.js","components/header/HeaderContainer.js","components/login/Login.js","App.js","components/hoc/withSuspense.js","index.js","components/common/FormsControls/FormsControls.js","utils/validators/Validators.js","components/common/FormsControls/FormControls.module.css","redux/profile-reducer.js","components/profile/ProfileInfo/ProfileInfo.module.css","components/common/Paginator/Paginator.module.css","components/header/Header.module.css","components/profile/MyPosts/MyPosts.module.css"],"names":["SEND_MESSAGE","initialState","dialogs","id","name","messages","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","instance","axios","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","authAPI","me","login","email","password","rememberMe","logout","getStatus","updateStatus","status","put","module","exports","mapStateToPropsForRedirect","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","Post","className","s","item","src","likesCount","maxLength10","maxLengthCreator","AddNewPostFormWrapped","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","MyPosts","log","postsElements","posts","map","p","postsBlock","values","addPost","newPostText","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","ProfileInfo","profile","descriptionBlock","photos","large","Preloader","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","style","backgroundColor","preloader","Boolean","window","location","hostname","match","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","followOnUnfollowFlow","apiMethod","actionCreator","a","resultCode","usersReducer","followed","count","filter","SET_USER_DATA","setAuthUserData","payload","getAuthUserData","authReducer","INITIALIZED_SUCCESS","initialized","appReducer","reducers","combineReducers","profileReducer","dialogsPage","sidebar","usersPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","c2","Navbar","nav","activeClassName","active","Paginator","totalItemsCount","onPageChanged","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","cn","selectedPage","pageNumber","User","user","small","userPhoto","usersPhoto","disabled","some","Users","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","compose","bind","totalCount","Header","header","loginBlock","HeaderContainer","LoginReduxForm","error","createField","Input","formSummaryError","length","stopSubmit","_error","formData","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","Suspense","fallback","AppContainer","withRouter","promise","Promise","all","SamuraiJSApp","basename","process","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","input","meta","touched","children","hasError","formControl","restProps","child","validators","text","maxLength","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","getUserProfile","newPost","postId"],"mappings":"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","file":"static/js/main.741cd3a9.chunk.js","sourcesContent":["/*const UPDATE_NEW_MESSAGE_BODY = 'UPDATE_NEW_MESSAGE_BODY';*/\r\nconst SEND_MESSAGE = 'SEND_MESSAGE';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ],\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        /*case UPDATE_NEW_MESSAGE_BODY:\r\n            return {\r\n                ...state,\r\n                newMessageBody: action.body\r\n            };*/\r\n        case SEND_MESSAGE:\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport let sendMessageCreator = (newMessageBody) => ({\r\n    type: SEND_MESSAGE, newMessageBody\r\n})\r\n\r\n/*export let updateNewMessageBodyCreator = (body) => ({\r\n    type: UPDATE_NEW_MESSAGE_BODY, body: body\r\n})*/\r\n\r\nexport default dialogsReducer;","import * as axios from \"axios\";\r\n\r\nconst baseUrl = 'https://social-network.samuraijs.com/api/1.0/';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL:'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"76646adc-4458-4b43-823c-8843c82294b7\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response=>response.data)\r\n    },\r\n\r\n    follow(userId){\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n\r\n    unfollow(userId){\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n\r\n    getProfile(userId){\r\n        console.warn(\"Obsolete method. Use Profile Api Object\");\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email, password, rememberMe = false){\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId){\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId){\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status){\r\n        return instance.put(`profile/status`, {status: status})\r\n    }\r\n}\r\n\r\n\r\n/*export const getUsers2 = (currentPage = 1, pageSize = 10) => {\r\n    return instance.get(baseUrl + `follow?page=${currentPage}&count=${pageSize}`,)\r\n        .then(response=>response.data)\r\n}*/\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__xQYEa\",\"selectedPage\":\"Users_selectedPage__3Gvl5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2f8iG\"};","import React from 'react';\r\nimport {Redirect, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const WithAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/Validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPosts = (props) => {\r\n    console.log(\"RENDER YO\")\r\n    let postsElements =\r\n        props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    /* let onPostChange = () => {\r\n         let text = newPostElement.current.value;\r\n         props.updateNewPostText(text);\r\n     }*/\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            {/*  <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange}\r\n                              ref={newPostElement} value={props.newPostText}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={onAddPost}>Add post</button>\r\n                </div>\r\n            </div>*/}\r\n            <AddNewPostFormWrapped onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name={\"newPostText\"} placeholder={\"Post message\"}\r\n                validate={[required, maxLength10 ]}\r\n                />\r\n                    {/*<textarea onChange={onPostChange}\r\n                              ref={newPostElement} value={props.newPostText}/>*/}\r\n            </div>\r\n            <div>\r\n                {/*<button onClick={onAddPost}>Add post</button>*/}\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormWrapped = reduxForm({form:\"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {Component} from 'react';\r\n\r\nclass ProfileStatus extends Component {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode=()=> {\r\n        this.setState({editMode: true})\r\n    }\r\n\r\n    deactivateEditMode() {\r\n        this.setState({editMode: false});\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({status: e.currentTarget.value});\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n        console.log(\"update\")\r\n       /* if(prevProps.status !== prevState.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }*/\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"------\"}\r\n                        </span>\r\n                    </div>\r\n                }\r\n                {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode.bind(this)} value={this.state.status}/>\r\n                    </div>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React, {useState, useEffect} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {Component} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n            <div>\r\n                        <span onDoubleClick={activateEditMode}>{props.status || \"------\"}\r\n                        </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if(!profile){\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport {addPostActionCreator, updatePostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        /*updateNewPostText: (text)=>{\r\n            let action = updatePostActionCreator(text);\r\n            dispatch(action);\r\n        },*/\r\n        addPost: (newPostText)=>dispatch(addPostActionCreator(newPostText))\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n/*    let posts = [\r\n    {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n    {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n    {id: 3, message: 'Blabla', likesCount: 11},\r\n    {id: 4, message: 'Dada', likesCount: 11}\r\n];*/\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__eNPoi\",\"item\":\"Navbar_item__QUsnd\",\"active\":\"Navbar_active__1rFn3\"};","export default __webpack_public_path__ + \"static/media/Spinner-3.4s-200px.2c06bb59.svg\";","import React from 'react';\r\nimport preloader from \"../../../assets/images/Spinner-3.4s-200px.svg\";\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <div style={{backgroundColor: 'white'}}><img src={preloader}/></div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}","let initialState = {}\r\nconst sidebarReducer = (state = initialState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT';\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: []\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n               /* users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })*/\r\n                users: updateObjectInArray(state.users, action.userId, \"id\",\r\n                    {followed: true})\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\",\r\n                    {followed: false})\r\n            }\r\n\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : [state.followingInProgress.filter(id => id != action.userId)]\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const followSuccess = (userId) => ({\r\n    type: FOLLOW, userId\r\n})\r\n\r\nexport const unfollowSuccess = (userId) => ({\r\n    type: UNFOLLOW, userId\r\n})\r\n\r\nexport const setUsers = (users) => ({\r\n    type: SET_USERS, users\r\n})\r\n\r\nexport const setCurrentPage = (currentPage) => ({\r\n    type: SET_CURRENT_PAGE, currentPage\r\n})\r\n\r\nexport const setUsersTotalCount = (totalUsersCount) => ({\r\n    type: SET_TOTAL_USERS_COUNT, count: totalUsersCount\r\n})\r\n\r\nexport const toggleIsFetching = (isFetching) => ({\r\n    type: TOGGLE_IS_FETCHING, isFetching\r\n})\r\n\r\nexport const toggleFollowingProgress = (isFetching, userId) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId\r\n})\r\n\r\nexport const requestUsers = (currentPage, pageSize) => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setCurrentPage(currentPage));\r\n        dispatch(setUsersTotalCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst followOnUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId) => {\r\n    return async (dispatch) => {\r\n        await followOnUnfollowFlow(dispatch, userId,\r\n            usersAPI.follow.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId) => {\r\n    return async (dispatch) => {\r\n        await followOnUnfollowFlow(dispatch, userId,\r\n            usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer;","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\r\n\r\n\r\nlet initialState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload, // destructurization on user, email, login\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\r\n    type: SET_USER_DATA,\r\n    payload: {userId, email, login, isAuth}\r\n})\r\n\r\nexport const getAuthUserData = () => async (dispatch) => {\r\n    let response = await authAPI.me();\r\n    if (response.data.resultCode === 0) {\r\n        let {id, email, login} = response.data.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email, password, rememberMe) => async (dispatch) => {\r\n\r\n    let response = await authAPI.login(email, password, rememberMe);\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n\r\n}\r\n\r\nexport const logout = (email, password, rememberMe) => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n\r\n}\r\nexport default authReducer;","import {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS})\r\n\r\nexport const initializeApp = () => (dispatch) => {\r\n   let promise = dispatch(getAuthUserData());\r\n   return Promise.all([promise])\r\n       .then(() => {\r\n        dispatch(initializedSuccess())\r\n   })\r\n\r\n}\r\n\r\nexport default appReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport appReducer from \"./app-reducer\";\r\n\r\n\r\nlet reducers = combineReducers(\r\n    {profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer, sidebar:sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer}\r\n)\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nconsole.log(s);\r\n// let s = {\r\n//     'nav': 'Navbar_nav__3ou9Q',\r\n//     'item': 'Navbar_item__3qaF3',\r\n//     'active' : 'Baksndakdn_actve'\r\n// }\r\n\r\nlet c1 = \"item\";\r\nlet c2 = \"active\";\r\n// \"item active\"\r\nlet classes = c1 + \" \" + c2;\r\nlet classesNew = `${s.item} ${c2}`;\r\n\r\n\r\nconst Navbar = () => {\r\n    return <nav className={s.nav}>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n        </div>\r\n        <div className={`${s.item} ${s.active}`}>\r\n            <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>Music</a>\r\n        </div>\r\n        <div className={s.item}>\r\n            <a>Settings</a>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React, {useState} from 'react';\r\nimport styles from \"../../common/Paginator/Paginator.module.css\";\r\nimport cn from \"classnames\"\r\n\r\nconst Paginator = ({totalItemsCount, pageSize, currentPage, onPageChanged, portionSize = 10}) => {\r\n    let pageCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pageCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n\r\n        {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => {\r\n            return <span className={cn({[styles.selectedPage]: currentPage === p},\r\n                styles.pageNumber)}\r\n                         key={p}\r\n                         onClick={(e) => {\r\n                             onPageChanged(p);\r\n                         }}>{p}</span>\r\n        })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n\r\n};\r\n\r\nexport default Paginator;","export default __webpack_public_path__ + \"static/media/user.ab7efdc7.png\";","import React from 'react';\r\nimport styles from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst User = ({user, followingInProgress, follow, unfollow}) => {\r\n    return (<div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + user.id}>\r\n                             <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                  className={styles.usersPhoto}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                unfollow(user.id)\r\n                            }}>Unfollow</button> :\r\n\r\n                            <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                follow(user.id)\r\n                            }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n        <span>\r\n                    <span>\r\n                        <div>{user.name}</div><div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"u.location.country\"}</div><div>{\"u.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n    </div>)\r\n};\r\n\r\nexport default User;","import React from 'react';\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\n\r\nconst Users = ({currentPage, totalUsersCount, pageSize, onPageChanged, ...props}) => {\r\n    //debugger\r\n\r\n    return <div>\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        {/* <button onClick={this.getUsers}>Get Users</button>*/}\r\n        {props.users.map(u => <User user={u}\r\n                                    key={u.id}\r\n        followingInProgress={props.followingInProgress}\r\n        follow={props.follow}\r\n        unfollow={props.unfollow}/>)}\r\n    </div>;\r\n};\r\n\r\nexport default Users;","import {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\n/*export const getUsersSelector = (state) => {\r\n    return getUsers(state).filter(u => true);\r\n}*/\r\n\r\n/*export const getUsersSuperSelector = createSelector(getUsers, getIsFetching,\r\n    (users, isFetching) => {\r\n    users.filter(u => true);\r\n})*/\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true);\r\n    })\r\n\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n}","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, requestUsers,\r\n    setCurrentPage,\r\n    unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {WithAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers, getUsersSelector,\r\n} from \"../../redux/users-selectors\";\r\n\r\nclass UsersContainer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        this.props.requestUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/>\r\n                : null}\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        users: getUsers(state),\r\n        //users: state.usersPage.users,\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage, requestUsers\r\n    })\r\n)(UsersContainer)\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src=\"https://media.istockphoto.com/photos/child-hands-formig-heart-shape-picture-id951945718?k=6&m=951945718&s=612x612&w=0&h=ih-N7RytxrTfhDyvyTQCA5q5xKoJToKSYgdsJ_mHrv0=\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <div>{props.login}  <button onClick={props.logout}>Logout</button> </div>\r\n                    : <NavLink to={\"/login\"}>Login</NavLink> }\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport Header from \"./Header\";\r\nimport * as axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout, setAuthUserData} from \"../../redux/auth-reducer\";\r\nimport {authAPI} from \"../../api/api\";\r\n\r\nclass HeaderContainer extends Component {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state)=> ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/Validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from \"../common/FormsControls/FormControls.module.css\"\r\n\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n                {createField(\"Email\", \"email\", [required], Input)}\r\n                {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n                {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n                {error && <div className={styles.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div><button>Login</button></div>\r\n            </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\nconst Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if(props.isAuth){\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import './App.css';\nimport React from 'react';\nimport  {Component} from 'react';\nimport Navbar from \"./components/navbar/Navbar\";\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\n/*import DialogsContainer from \"./components/dialogs/DialogsContainer\";*/\nimport UsersContainer from \"./components/users/UsersContainer\";\n/*import ProfileContainer from \"./components/profile/ProfileContainer\";*/\nimport HeaderContainer from \"./components/header/HeaderContainer\";\nimport LoginPage from \"./components/login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store from \"./redux/redux-store\";\nimport Profile from \"./components/profile/Profile\";\nimport {withSuspense} from \"./components/hoc/withSuspense\";\n\n\n/*\n\n\nссылка на git-репозиторий: https://github.com/it-kamasutra/react-way-of-samurai\n\ngitk --all&     (открыть графическую оболочку гита, чтобы позырить все коммиты)\nctrl + insert (копировать в буфер обмена)\nshift + insert (вставить из буфера обмена)\ngit checkout commit-number (переключится на нужный коммит)\n\n*/\n\nconst DialogsContainer = React.lazy(() => import('./components/dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/profile/ProfileContainer'));\n\nclass App extends Component {\n\n    componentDidMount() {\n        /*authAPI.me()\n             .then(response => {\n                 if(response.data.resultCode===0){\n                     let {id, email, login} = response.data.data;\n                     this.props.setAuthUserData(id, email, login);\n                 }\n             })*/\n        this.props.initializeApp();\n    }\n    render() {\n        if(!this.props.initialized){\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/dialogs'\n                           render={ () => <React.Suspense fallback={<Preloader/>}>\n                               <DialogsContainer store={this.props.store}/></React.Suspense> }/>\n                    <Route path='/profile/:userId?'\n                           render= {withSuspense(ProfileContainer)}/>\n                    <Route path='/users'\n                           render={() => <UsersContainer/>}/>\n                    <Route path='/login'\n                           render={() => <LoginPage/>}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized\n})\n\nlet AppContainer =  compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\nconst SamuraiJSApp = (props) => {\n    return <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>;\n}\n\nexport default SamuraiJSApp;\n\n\n","import React from 'react';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n    }\r\n};\r\n","import * as serviceWorker from './serviceWorker';\nimport store from \"./redux/redux-store\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SamuraiJSApp from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\n ReactDOM.render(\n        <SamuraiJSApp/>, document.getElementById('root'));\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();","import React from 'react';\r\nimport styles from \"./FormControls.module.css\"\r\nimport {required} from \"../../../utils/validators/Validators\";\r\nimport {Field} from \"redux-form\";\r\n\r\n\r\nconst FormControl = ({input, meta:{touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/> </FormControl>\r\n};\r\n\r\nexport const Input = (props) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/> </FormControl>\r\n};\r\n\r\nexport const createField = (placeholder, name, validators, component, props, text=\"\") => {\r\n    return <div><Field placeholder={placeholder} name={name}\r\n                       validate={validators} component={component}\r\n                       {...props}/>{text}</div>\r\n}","export const required = value => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `MaxLength is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3gw1b\",\"error\":\"FormControls_error__1v-0g\",\"formSummaryError\":\"FormControls_formSummaryError__3JYVj\"};","import {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst DELETE_POST = 'DELETE_POST'\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ],\r\n    /*   newPostText: 'it-kamasutra.com',*/\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state, posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            };\r\n        }\r\n        case DELETE_POST:\r\n            return {\r\n                ...state, posts: state.posts.filter(p => p.id != action.postId)\r\n            }\r\n\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = (newPostText) => ({\r\n    type: ADD_POST, newPostText\r\n})\r\n\r\nexport const deletePost = (postId) => ({\r\n    type: DELETE_POST, postId\r\n})\r\n\r\nexport const setUserProfile = (profile) => ({\r\n    type: SET_USER_PROFILE, profile\r\n})\r\n\r\nexport const setStatus = (status) => ({\r\n    type: SET_STATUS, status\r\n})\r\n\r\nexport const getUserProfile = (userId) => async (dispatch) => {\r\n    let response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n\r\n}\r\n\r\nexport const getStatus = (userId) => async (dispatch) => {\r\n    let response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data));\r\n}\r\n\r\nexport const updateStatus = (status) => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\n\r\nexport default profileReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__U4I2z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__uXJsd\",\"paginator\":\"Paginator_paginator__2x5k2\",\"pageNumber\":\"Paginator_pageNumber__1sJJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__G-fFJ\",\"loginBlock\":\"Header_loginBlock__pRAco\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__rNcFI\",\"posts\":\"MyPosts_posts__2Xqo6\"};"],"sourceRoot":""}